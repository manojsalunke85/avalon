#!/bin/bash
#
# Copyright 2019 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# Exit on non-zero exit code from subcommand
set -e

# Set trusted-compute-framework project directory relative to this file
PROJECT_DIR=$(cd $(dirname $(dirname $0)) && pwd)

# Make Avalon scripts accessible
PATH=$PROJECT_DIR/bin:$PATH

# Arguments to trigger the tests
DIRECT_MODEL_TESTS=0
BESU_PROXY_MODEL_TESTS=0
GANACHE_PROXY_MODEL_TESTS=0
FABRIC_PROXY_MODEL_TESTS=0
WP_DIRECT_MODEL_TESTS=0
MULTIPLE_WP_DIRECT_MODEL_TESTS=0
DIRECT_MODEL_SGX_TESTS=0
WP_DIRECT_MODEL_SGX_TESTS=0
MULTIPLE_WP_DIRECT_MODEL_SGX_TESTS=0
BESU_PROXY_MODEL_SGX_TESTS=0
GANACHE_PROXY_MODEL_SGX_TESTS=0
FABRIC_PROXY_MODEL_SGX_TESTS=0
FABRIC_PROXY_MODEL_WP_TESTS=0
FABRIC_PROXY_MODEL_WP_SGX_TESTS=0
BESU_PROXY_MODEL_WP_TESTS=0
BESU_PROXY_MODEL_WP_SGX_TESTS=0
GANACHE_PROXY_MODEL_WP_TESTS=0
GANACHE_PROXY_MODEL_WP_SGX_TESTS=0

main() {

    if [ "$DIRECT_MODEL_TESTS" == "1" ]; then
        run_docker_test ./ci/docker-compose-direct-model.yaml
    elif [ "$BESU_PROXY_MODEL_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-besu-proxy-model.yaml -f docker-compose-besu-tests.yaml config > besu-proxy-model.yaml
        run_docker_test ./besu-proxy-model.yaml
    elif [ "$GANACHE_PROXY_MODEL_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-ganache-proxy-model.yaml -f docker-compose-ganache-tests.yaml config > ganache-proxy-model.yaml
        run_docker_test ./ganache-proxy-model.yaml
    elif [ "$FABRIC_PROXY_MODEL_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-fabric-proxy-model.yaml -f docker-compose-fabric-tests.yaml config > fabric-proxy-model.yaml
        run_docker_test ./fabric-proxy-model.yaml
    elif [ "$WP_DIRECT_MODEL_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml config > wp-direct-model.yaml
        run_docker_test ./wp-direct-model.yaml
    elif [ "$DIRECT_MODEL_SGX_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-direct-model-sgx.yaml config > direct-model-sgx.yaml
        run_docker_test ./direct-model-sgx.yaml
    elif [ "$WP_DIRECT_MODEL_SGX_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml -f docker-compose-wp-direct-model-sgx.yaml config > wp-direct-model-sgx.yaml
        run_docker_test ./wp-direct-model-sgx.yaml
    elif [ "$BESU_PROXY_MODEL_SGX_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-besu-proxy-model.yaml -f docker-compose-besu-tests.yaml -f docker-compose-direct-model-sgx.yaml config > besu-proxy-model-sgx.yaml
        run_docker_test ./besu-proxy-model-sgx.yaml
    elif [ "$GANACHE_PROXY_MODEL_SGX_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-ganache-proxy-model.yaml -f docker-compose-ganache-tests.yaml -f docker-compose-direct-model-sgx.yaml config > ganache-proxy-model-sgx.yaml
        run_docker_test ./ganache-proxy-model-sgx.yaml
    elif [ "$FABRIC_PROXY_MODEL_SGX_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-fabric-proxy-model.yaml -f docker-compose-fabric-tests.yaml -f docker-compose-direct-model-sgx.yaml config > fabric-proxy-model-sgx.yaml
        run_docker_test ./fabric-proxy-model-sgx.yaml
    elif [ "$FABRIC_PROXY_MODEL_WP_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml -f docker-compose-fabric-proxy-model.yaml -f docker-compose-fabric-tests.yaml config > wp-fabric-proxy-model.yaml
        run_docker_test ./wp-fabric-proxy-model.yaml
    elif [ "$FABRIC_PROXY_MODEL_WP_SGX_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml -f docker-compose-fabric-proxy-model.yaml -f docker-compose-direct-model-sgx.yaml -f docker-compose-fabric-tests.yaml config > wp-fabric-proxy-model-sgx.yaml
        run_docker_test ./wp-fabric-proxy-model-sgx.yaml
    elif [ "$BESU_PROXY_MODEL_WP_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml -f docker-compose-besu-proxy-model.yaml -f docker-compose-besu-tests.yaml config > wp-besu-proxy-model.yaml
        run_docker_test ./wp-besu-proxy-model.yaml
    elif [ "$BESU_PROXY_MODEL_WP_SGX_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml -f docker-compose-besu-proxy-model.yaml -f docker-compose-direct-model-sgx.yaml -f docker-compose-besu-tests.yaml config > wp-besu-proxy-model-sgx.yaml
        run_docker_test ./wp-besu-proxy-model-sgx.yaml
    elif [ "$GANACHE_PROXY_MODEL_WP_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml -f docker-compose-ganache-proxy-model.yaml -f docker-compose-ganache-tests.yaml config > wp-ganache-proxy-model.yaml
        run_docker_test ./wp-ganache-proxy-model.yaml
    elif [ "$GANACHE_PROXY_MODEL_WP_SGX_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml -f docker-compose-ganache-proxy-model.yaml -f docker-compose-direct-model-sgx.yaml -f docker-compose-ganache-tests.yaml config > wp-ganache-proxy-model-sgx.yaml
        run_docker_test ./wp-ganache-proxy-model-sgx.yaml
    elif [ "$MULTIPLE_WP_DIRECT_MODEL_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml -f docker-compose-multiple-wp-direct-model.yaml config > multiple-wp-direct-model.yaml
        run_docker_test ./multiple-wp-direct-model.yaml
    elif [ "$MULTIPLE_WP_DIRECT_MODEL_SGX_TESTS" == "1" ]; then
        cd ci
        docker-compose -f docker-compose-direct-model.yaml -f docker-compose-wp-direct-model.yaml -f docker-compose-multiple-wp-direct-model.yaml -f docker-compose-multiple-wp-direct-model-sgx.yaml config > multiple-wp-direct-model-sgx.yaml
        run_docker_test ./multiple-wp-direct-model-sgx.yaml
    fi

}

while getopts "dbfgwstuvxyzijklach" opt; do
    case $opt in
        d)
            DIRECT_MODEL_TESTS=1
            ;;
        b)
            BESU_PROXY_MODEL_TESTS=1
            ;;
	g)
            GANACHE_PROXY_MODEL_TESTS=1
	    ;;
        f)
            FABRIC_PROXY_MODEL_TESTS=1
            ;;
	w)
	    WP_DIRECT_MODEL_TESTS=1
	    ;;
	s)
            DIRECT_MODEL_SGX_TESTS=1
	    ;;
	t)
            WP_DIRECT_MODEL_SGX_TESTS=1
	    ;;
	u)
            BESU_PROXY_MODEL_SGX_TESTS=1
	    ;;
	v)
	    GANACHE_PROXY_MODEL_SGX_TESTS=1
	    ;;
	x)
            FABRIC_PROXY_MODEL_SGX_TESTS=1
	    ;;
        y)
            FABRIC_PROXY_MODEL_WP_TESTS=1
            ;;
        z)
            FABRIC_PROXY_MODEL_WP_SGX_TESTS=1
            ;;
        i)
            BESU_PROXY_MODEL_WP_TESTS=1
            ;;
        j)
            BESU_PROXY_MODEL_WP_SGX_TESTS=1
            ;;
        k)
            GANACHE_PROXY_MODEL_WP_TESTS=1
            ;;
        l)
            GANACHE_PROXY_MODEL_WP_SGX_TESTS=1
            ;;
	a)
            MULTIPLE_WP_DIRECT_MODEL_TESTS=1
	    ;;
	c)
	    MULTIPLE_WP_DIRECT_MODEL_SGX_TESTS=1
	    ;;
        h)
            echo "Usage: run_tests script to trigger tests for direct/proxy model"
	    echo "    run_tests -d       To run (Singleton) direct model tests."
	    echo "    run_tests -f       To run (Singleton) fabric proxy model  tests."
	    echo "    run_tests -b       To run (Singleton) besu ethereum proxy model tests."
	    echo "    run_tests -g       To run (Singleton) ganache ethereum proxy model tests."
	    echo "    run_tests -w       To run (Worker Pool) direct model tests."
	    echo "    run_tests -s       To run (Singleton) direct model SGX tests."
	    echo "    run_tests -t       To run (Worker Pool) direct model SGX tests."
	    echo "    run_tests -u       To run (Singleton) besu ethereum proxy model SGX tests."
	    echo "    run_tests -v       To run (Singleton) ganache ethereum proxy model SGX tests."
	    echo "    run_tests -x       To run (Singleton) fabric proxy model SGX tests."
            echo "    run_tests -y       To run (Worker Pool) fabric proxy model tests."
            echo "    run_tests -z       To run (Worker Pool) fabric proxy model SGX tests."
            echo "    run_tests -i       To run (Worker Pool) besu ethereum proxy model tests."
            echo "    run_tests -j       To run (Worker Pool) besu ethereum proxy model SGX tests."
            echo "    run_tests -k       To run (Worker Pool) ganache ethereum proxy model tests."
            echo "    run_tests -l       To run (Worker Pool) ganache ethereum proxy model SGX tests."
            echo "    run_tests -a       To run (Multiple Worker Pool) direct model tests."
            echo "    run_tests -c       To run (Multiple Worker Pool) direct model SGX tests."
	    exit 0
            ;;
        \?)
           echo "Invalid Option: -$OPTARG" 1>&2
           exit 2
            ;;
    esac
done
main
